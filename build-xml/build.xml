<project name="Eater" default="deploy" basedir=".">
    <taskdef resource="net/sf/antcontrib/antcontrib.properties"/>

    <description>
        simple example build file
    </description>
    <!-- set global properties for this build -->
    <property name="project-root" value="${basedir}/.."/>
    <property name="src" value="${project-root}/src"/>
    <property name="build" value="${project-root}/build"/>
    <property name="dist"  value="${project-root}/dist"/>
    <property name="web" value="${project-root}/webapplication"/>
    <property name="lib" value="${project-root}/../Libraries"/>
    <property name="tomcat" value="/servers/apache-tomcat-8.0.5"/>
    <property name="projectName" value="Eater"/>

    <path id="classpath">
        <fileset dir="${lib}">
            <include name="**/*.jar"/>
        </fileset>
    </path>

    <target name="init">
        <!-- Create the time stamp -->
        <tstamp/>
        <!-- Create the build directory structure used by compile -->
        <mkdir dir="${build}"/>
    </target>

    <target name="shutdownTomcat">
        <exec executable="/bin/bash">
            <arg value="${tomcat}/bin/shutdown.sh"/>
        </exec>
    </target>

    <target name="deploy" depends="dist">
        <!--<copy file="${dist}/${projectName}.war" todir="${tomcat}/webapps" overwrite="true"/>-->
        <echo message="Deleting: ${tomcat}/webapps/${projectName}"/>
        <delete dir="${tomcat}/webapps/${projectName}"/>
        <mkdir dir="${tomcat}/webapps/${projectName}"/>
        <unzip src="${dist}/${projectName}.war" dest="${tomcat}/webapps/${projectName}" overwrite="true"/>
    </target>

    <target name="compile" depends="init"
            description="compile the source">
        <mkdir dir="${build}/WEB-INF/classes"/>
        <!-- Compile the java code from ${src} into ${build} -->
        <javac srcdir="${src}" destdir="${build}/WEB-INF/classes" classpathref="classpath"
               debug="true" debuglevel="lines,vars,source" includeantruntime="true"/>

        <copy todir="${build}/WEB-INF/classes">
            <fileset dir="${src}">
                <include name="log4j2.xml"/>
            </fileset>
        </copy>

        <copy todir="${build}">
            <fileset dir="${web}">
                <include name="**/*"/>
            </fileset>
        </copy>
        <antcall target="setBuildDate"/>
    </target>

    <target name="dist" depends="compile"
            description="generate the distribution" >
        <!-- Create the distribution directory -->
        <mkdir dir="${build}/WEB-INF/lib"/>
        <copy todir="${build}/WEB-INF/lib" flatten="true">
            <fileset dir="${lib}">
                <include name="**/log4j-api-2.0-rc1.jar"/>
                <include name="**/log4j-core-2.0-rc1.jar"/>
                <include name="**/gson-2.2.4.jar"/>
                <include name="**/guava-17.0.jar"/>
                <include name="**/commons-dbcp2-2.0.jar"/>
                <include name="**/commons-pool2-2.2.jar"/>
                <include name="**/mysql-connector-java-5.1.30-bin.jar"/>
                <include name="**/commons-logging-1.1.3.jar"/>

                <!--<include name="**/log4j-slf4j-impl-2.0-rc1.jar"/>-->
                <!--<include name="**/log4j-to-slf4j-2.0-rc1.jar"/>-->
                <!--<include name="**/slf4j-api-1.7.6.jar"/>-->
            </fileset>
        </copy>
        <!-- Put everything in ${build} into the MyProject-${DSTAMP}.jar"/> file -->
        <jar file="${dist}/${projectName}.war" basedir="${build}"/>
    </target>

    <target name="clean"
            description="clean up" >
        <!-- Delete the ${build} and ${dist} directory trees -->
        <delete dir="${build}"/>
        <delete dir="${dist}"/>
    </target>
    <target name="html">
        <copy todir="${tomcat}/${projectName}/">
            <fileset dir="${build}">
                <exclude name="*.class"/>
                <exclude name="*.jar"/>
            </fileset>
        </copy>
    </target>
    <target name="dev" depends="compile">
        <!-- Copy the class files  -->
        <copy todir="${tomcat}/${projectName}/WEB-INF/classes" overwrite="true">
            <fileset dir="${build}/WEB-INF/classes"/>
        </copy>
    </target>

    <target name="setBuildDate">
        <tstamp>
            <format property="time.stamp" pattern="yyyy-MM-dd_HH:mm:ss"/>
        </tstamp>
        <echo message="Build date is: ${time.stamp}"/>
        <loadfile property="web.xml.file" srcfile="${web}/WEB-INF/web.xml"/>
        <propertyregex property="build.date.result" input="${web.xml.file}" replace="${time.stamp}" regexp="build\.date"/>
        <echo file="${build}/WEB-INF/web.xml">${build.date.result}</echo>
    </target>
</project>